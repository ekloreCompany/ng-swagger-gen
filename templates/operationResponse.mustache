{{{operationComments}}}{{operationName}}Response({{#operationParamsClass
  }}params: {{serviceClass}}.{{operationParamsClass}}{{/operationParamsClass}}{{^operationParamsClass
  }}{{#operationParameters}}{{paramVar}}{{^paramRequired}}?{{/paramRequired}}: {{{paramType
  }}}{{^paramIsLast}},
    {{/paramIsLast}}{{/operationParameters}}{{/operationParamsClass
    }}): Observable<HttpResponse<{{{operationResultType}}}>> {
    let __params = this.newParams();
    let __headers = new HttpHeaders();
    let __body: any = null;{{#operationIsMultipart}}
    __headers.append('Content-Type', 'multipart/form-data');
    let __formData = new FormData();
    __body = __formData;{{/operationIsMultipart}}
{{#operationParameters}}{{>parameter}}
{{/operationParameters}}
    let req = new HttpRequest<any>(
      '{{operationMethod}}',
      this.rootUrl + `{{{operationPathExpression}}}`,
      __body,
      {
        headers: __headers,
        params: __params,
        responseType: '{{{operationResponseType}}}'
      });

    return this.http.request<any>(req).pipe(
      filter(_r => _r instanceof HttpResponse),
      map(_r => {
        let _resp = _r as HttpResponse<any>;
        let _body: {{{operationResultType}}} = null;
        {{#operationIsUnknown}}_body = _resp.body{{/operationIsUnknown
        }}{{#operationIsString}}_body = _resp.body as string;{{/operationIsString
        }}{{#operationIsNumber}}_body = parseFloat(_resp.body as string);{{/operationIsNumber
        }}{{#operationIsBoolean}}_body = _resp.body == 'true';{{/operationIsBoolean
        }}{{#operationIsEnum}}_body = _resp.body as {{{operationResultType}}};{{/operationIsEnum
        }}{{#operationIsObject}}_body = _resp.body as {{{operationResultType}}};{{/operationIsObject
        }}{{#operationIsFile}}_body = _resp.body as Blob;{{/operationIsFile
        }}{{#operationIsPrimitiveArray}}_body = _resp.body as {{{operationResultType}}};{{/operationIsPrimitiveArray
        }}
        return _resp.clone({body: _body}) as HttpResponse<{{{operationResultType}}}>;
      })
    );
  }
